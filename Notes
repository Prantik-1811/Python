Python Notes (Beginner and Basic Stuff)

You can run Python’s interpreter in a terminal window, allowing you to try 
bits of Python code without having to save and run an entire program

Example:   >>> print("Hello Python interpreter!") 
Hello Python interpreter!

>>> prompt indicates that you should be using the terminal (Powershell also works if u have an added path during installation of Python)
window, and the bold text is the code you should type in and then execute by 
pressing enter

Extra:  About the Sublime Text Editor
Sublime Text is a simple text editor that can be installed on all modern 
operating systems. Sublime Text lets you run almost all of your programs 
directly from the editor instead of through a terminal. Your code runs in 
a terminal session embedded in the Sublime Text window, which makes it 
easy to see the output


**WHILE INSTALLATION CLICKING ADD TO PATH IS NECESSARY**

Troubleshooting
 If you can’t get hello_world.py to run, here are a few remedies you can try 
that are also good general solutions for any programming problem:
 •	When a program contains a significant error, Python displays a trace
back, which is an error report. Python looks through the file and tries to 
identify the problem. Check the traceback; it might give you a clue as to 
what issue is preventing the program from running.
 •	Step away from your computer, take a short break, and then try again. 
Remember that syntax is very important in programming, so even a 
missing colon, a mismatched quotation mark, or mismatched parenthe
ses can prevent a program from running properly. Reread the relevant 
parts of this chapter, look over your code, and try to find the mistake.
 •	Start over again. You probably don’t need to uninstall any software, but 
it might make sense to delete your hello_world.py file and re-create it 
from scratch.


RUNNING DIRECTLY FROM TERMINAL

You can use the terminal command cd, for change directory, to navigate 
through your filesystem in a command window. The command dir, for 
directory, shows you all the files that exist in the current directory. 
Open a new terminal window and enter the following commands to 
run hello_world.py:
  C:\> cd Desktop\python_work
  C:\Desktop\python_work> dir
 hello_world.py
  C:\Desktop\python_work> python hello_world.py
 Hello Python world

At  you use the cd command to navigate to the python_work folder, 
which is in the Desktop folder. Next, you use the dir command to make sure 
hello_world.py is in this folder . Then you run the file using the command 
python hello_world.py . 
Most of your programs will run fine directly from your editor. But as 
your work becomes more complex, you’ll want to run some of your pro
grams from a terminal.


LOGIC BEHING THE EXECUTION

When you run the file hello_world.py, the ending .py indicates that 
the file is a Python program. Your editor then runs the file through the 
Python interpreter, which reads through the program and determines what 
each word in the program means

 As you write your programs, your editor highlights different parts of 
your program in different ways. For example, it recognizes that print() is 
the name of a function and displays that word in one color. It recognizes 
that "Hello Python world!" is not Python code and displays that phrase in a 
different color. This feature is called syntax highlighting and is quite useful as 
you start to write your own programs

Naming and Using Variables
 When you’re using variables in Python, you need to adhere to a few rules 
and guidelines. Breaking some of these rules will cause errors; other guide
lines just help you write code that’s easier to read and understand. Be sure 
to keep the following variable rules in mind:

 •	Variable names can contain only letters, numbers, and underscores. 
They can start with a letter or an underscore, but not with a number. 
For instance, you can call a variable message_1 but not 1_message.

 •	Spaces are not allowed in variable names, but underscores can be used 
to separate words in variable names. For example, greeting_message 
works, but greeting message will cause errors.

 •	Avoid using Python keywords and function names as variable names; 
that is, do not use words that Python has reserved for a particular pro
grammatic purpose, such as the word print. 

 •	Variable names should be short but descriptive. For example, name is 
better than n, student_name is better than s_n, and name_length is better 
than length_of_persons_name.

 •	Be careful when using the lowercase letter l and the uppercase letter O 
because they could be confused with the numbers 1 and 0.

 It can take some practice to learn how to create good variable names, 
especially as your programs become more interesting and complicated. As 
you write more programs and start to read through other people’s code, 
you’ll get better at coming up with meaningful names.

 note The Python variables you’re using at this point should be lowercase. You won’t get 
errors if you use uppercase letters, but uppercase letters in variable names have 
special meanings that we’ll discuss in later chapters

Traceback to Trouble 

When an error occurs in your program, the Python interpreter does its 
best to help you figure out where the problem is. The interpreter provides 
a traceback when a program cannot run successfully. A traceback is a record 
of where the interpreter ran into trouble when trying to execute your code.

The output at  reports that an error occurs in line 2 of the file 
hello_world.py. The interpreter shows this line  to help us spot the error 
quickly and tells us what kind of error it found
 Variables Are Labels

 Variables are often described as boxes you can store values in. This idea can 
be helpful the first few times you use a variable, but it isn’t an accurate way 
to describe how variables are represented internally in Python. It’s much 
better to think of variables as labels that you can assign to values. You can 
also say that a variable references a certain value.

This distinction probably won’t matter much in your initial programs, 
but it’s worth learning earlier rather than later. At some point, you’ll see 
unexpected behavior from a variable, and an accurate understanding of 
how variables work will help you identify what’s happening in your code


The best way to understand new programming concepts is to try using them in your 
programs. If you get stuck while working on an exercise in this book, try doing some
thing else for a while. If you’re still stuck, review the relevant part of that chapter.

