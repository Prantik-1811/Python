 Strings

 A string is a series of characters. Anything inside quotes is considered 
a string in Python, and you can use single or double quotes around your 
strings like this: 
"This is a string."
 'This is also a string.'

This flexibility allows you to use quotes and apostrophes within your 
strings

'I told my friend, "Python is my favorite language!"'
 "The language 'Python' is named after Monty Python, not the snake."
 "One of Python's strengths is its diverse and supportive community."

Changing Case in a String with Method

name = "ada lovelace"
 print(name.title())
 Save this file as name.py, and then run it. You should see this output:
 Ada Lovelace

A method is an action that Python can perform on a piece of data. The dot 
(.) after name in name.title() tells Python to make the title() method act on 
the variable name

That information is provided inside the parentheses. The title() function doesn’t need 
any additional information, so its parentheses are empty. 
The title() method changes each word to title case, where each word 
begins with a capital letter. This is useful because you’ll often want to think 
of a name as a piece of information.

other methds are name.lower and name .upper with similar syntax

Using Variables in Strings
 In some situations, you’ll want to use a variable’s value inside a string. For 
example, you might want two variables to represent a first name and a last 
name respectively, and then want to combine those values to display some
one’s full name:
 full_name.py
 first_name = "ada"
 last_name = "lovelace"
  full_name = f"{first_name} {last_name}"
 print(full_name)


 To insert a variable’s value into a string, place the letter f immediately 
before the opening quotation mark . Put braces around the name or names 
of any variable you want to use inside the string. Python will replace each 
variable with its value when the string is displayed.
 These strings are called f-strings. The f is for format, because Python 
formats the string by replacing the name of any variable in braces with its 
value. The output from the previous code is:

 For example, you can use f- strings to 
compose complete messages using the information associated with a vari
able, as shown here: 
first_name = "ada"
 last_name = "lovelace"
 full_name = f"{first_name} {last_name}"
  print(f"Hello, {full_name.title()}!")

You can do a lot with f- strings. For example, you can use f- strings to 
compose complete messages using the information associated with a vari
able, as shown here: 
first_name = "ada"
 last_name = "lovelace"
 full_name = f"{first_name} {last_name}"
  print(f"Hello, {full_name.title()}!")
 The full name is used in a sentence that greets the user , and the 
title() method changes the name to title case. This code returns a simple 
but nicely formatted greeting

assigning the message to a variable  we make the final print() call much 
simpler .

note F- strings were first introduced in Python 3.6. If you’re using Python 3.5 or earlier, 
you’ll need to use the format() method rather than this f syntax. To use format(), list 
the variables you want to use in the string inside the parentheses following format. 
Each variable is referred to by a set of braces; the braces will be filled by the values 
listed in parentheses in the order provided:
 full_name = "{} {}".format(first_name, last_name)



 Adding Whitespace to Strings with Tabs or Newlines

 In programming, whitespace refers to any nonprinting character, such as 
spaces, tabs, and end- of- line symbols. You can use whitespace to organize 
your output so it’s easier for users to read.
 To add a tab to your text, use the character combination \t as shown 
at :
 >>> print("Python") 
Python 
 >>> print("\tPython") 
    Python 
To add a newline in a string, use the character combination \n:
 >>> print("Languages:\nPython\nC\nJavaScript") 
Languages: 
Python
 C 
JavaScript 
You can also combine tabs and newlines in a single string. The string 
"\n\t" tells Python to move to a new line, and start the next line with a tab. 
The following example shows how you can use a one- line string to generate 
four lines of output:
 >>> print("Languages:\n\tPython\n\tC\n\tJavaScript") 
Languages: 
    Python 
    C 
    JavaScript 
Newlines and tabs will be very useful in the next two chapters when you 
start to produce many lines of output from just a few lines of code.


Stripping Whitespace

 Python can look for extra whitespace on the right and left sides of a 
string. To ensure that no whitespace exists at the right end of a string, use 
the rstrip() method.

To remove the whitespace from the string, you strip the whitespace 
from the right side of the string and then associate this new value with the 
original variable, as shown at . Changing a variable’s value is done often 
in programming. This is how a variable’s value can be updated as a pro
gram is executed or in response to user input.
 You can also strip whitespace from the left side of a string using the 
lstrip() method, or from both sides at once using strip():
  >>> favorite_language = ' python ' 
 >>> favorite_language.rstrip() 
' python' 
 >>> favorite_language.lstrip() 
'python ' 
 >>> favorite_language.strip() 
'python'



